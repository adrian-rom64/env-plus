import { Metadata, PropertyMetadata } from './Metadata'
import { writeFile } from 'fs/promises'
import { writeFileSync } from 'fs'

export class EnvExampleGenerator {
  getEnvExampleContent(target: Object) {
    const meta = Metadata.forObject(target)
    return this.header + this.renderProperties(meta.properties)
  }

  async saveEnvExample(target: Object, filename: string) {
    const content = this.getEnvExampleContent(target)

    await writeFile(filename, content)
  }

  saveEnvExampleSync(target: Object, filename: string) {
    const content = this.getEnvExampleContent(target)

    writeFileSync(filename, content)
  }

  private renderProperties(properties: Record<string, PropertyMetadata>) {
    let text = ''

    for (const props of Object.values(properties)) {
      text += this.renderProperty(props)
    }

    return text.slice(0, text.length - 1)
  }

  private get header() {
    const line1 = '# This file is autogenerated by env-plus'
    const line2 = '# Do not edit it manually'

    return `${line1}\n${line2}\n\n`
  }

  private renderProperty(props: PropertyMetadata) {
    const required = props.default === undefined && !props.optional
    const requiredStr = required ? '[REQUIRED]' : '[OPTIONAL]'
    const valueStr = props.example ?? ''

    const line1 = `# ${requiredStr} ${props.description ?? ''}`
    const line2 = `${props.path}="${valueStr}"`

    return `${line1}\n${line2}\n\n`
  }
}
